{"version":3,"sources":["components/Container.js","screens/Navbar.js","components/Flex.js","components/Card.js","screens/Footer.js","components/Parallax.js","screens/Content.js","App.js","serviceWorker.js","index.js","assets/images/ger.jpg"],"names":["Container","styled","div","fontSize","lineHeight","color","NavbarContainer","height","backgroundColor","display","position","top","width","alignItems","NavTitle","h3","padding","fontFamily","NavMenuContainer","alignSelf","flex","marginRight","justifyContent","NavItem","button","active","border","outline","fontWeight","cursor","Navbar","Flex","Card","borderRadius","boxShadow","background","bottom","LeftContent","margin","RightContent","flexDirection","Footer","Parallax","backgroundImage","backgroundAttachment","backgroundRepeat","backgroundSize","ContentContainer","minHeight","marginTop","Content","HeaderBackground","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"yJAQeA,EANGC,IAAOC,IAAI,CACzBC,SAAU,OACVC,WAAY,MACZC,MAAO,YCDLC,EAAkBL,YAAOD,EAAPC,CAAkB,CACtCM,OAAQ,GACRC,gBAAiB,OACjBC,QAAS,OACTC,SAAU,QACVC,IAAK,EACLC,MAAO,OACPC,WAAY,WAGVC,EAAWb,IAAOc,GAAG,CACvBC,QAAS,SACTX,MAAO,OACPY,WAAY,SACZL,MAAO,KAGLM,EAAmBjB,IAAOC,IAAI,CAChCiB,UAAW,SACXZ,OAAQ,OACRE,QAAS,OACTW,KAAM,EACNC,YAAa,GACb,UAAW,CACPhB,MAAO,SAEXiB,eAAgB,WAGdC,EAAUtB,IAAOuB,QAAO,cAAGC,OAAH,MAAiB,CAC3CjB,gBAAiB,UACjBkB,OAAQ,OACRrB,MAAO,OACPE,OAAQ,OACRoB,QAAS,OACTC,WAAY,IACZZ,QAAS,SACT,SAAU,CACNR,gBAAiB,UACjBqB,OAAQ,eAkBDC,EAdA,kBACX,kBAACxB,EAAD,KACI,kBAACQ,EAAD,cAGA,kBAACI,EAAD,KACI,kBAACK,EAAD,aACA,kBAACA,EAAD,cACA,kBAACA,EAAD,iBACA,kBAACA,EAAD,mBCjDGQ,EALF9B,IAAOC,IAAI,CACpBO,QAAS,OACTW,KAAM,ICMKY,EARF/B,IAAOC,IAAI,CACpBc,QAAS,GACTiB,aAAc,EACdzB,gBAAiB,QACjBH,MAAO,QACP6B,UAAW,+BCFTlC,EAAYC,YAAO+B,EAAP/B,CAAa,CAC3BQ,QAAS,OACT0B,WAAY,QACZC,OAAQ,EACRH,aAAc,EACd5B,MAAO,UACPE,OAAQ,GACRS,QAAS,EACTN,SAAU,QACVE,MAAO,SAGLyB,EAAcpC,YAAO8B,EAAP9B,CAAa,CAC7BqC,OAAQ,WAGNC,EAAetC,YAAO8B,EAAP9B,CAAa,CAC9BqC,OAAQ,SACRE,cAAe,gBAeJC,EAZA,kBACX,kBAAC,EAAD,KACI,kBAACJ,EAAD,yIAIA,kBAACE,EAAD,qD,gBCrBOG,EATEzC,IAAOC,KAAI,gBAAGiC,EAAH,EAAGA,WAAY5B,EAAf,EAAeA,OAAf,MAA6B,CACrDoC,gBAAgB,QAAD,OAAUR,EAAV,MACf5B,OAAQA,GAAkB,qBAC1BK,MAAO,OACPgC,qBAAsB,QACtBC,iBAAkB,YAClBC,eAAgB,8BCFdC,EAAmB9C,YAAOD,EAAPC,CAAkB,CACvC+C,UAAW,qBACX5B,KAAM,EACN6B,UAAW,KAwDAC,EArDC,kBACZ,kBAACH,EAAD,KACI,kBAAC,EAAD,CACIZ,WAAYgB,KAGZ,+BAIJ,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+B,OClCOC,EAfH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,cAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,aAAD,KACE,2ICTYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,iC","file":"static/js/main.c6c77dd3.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nconst Container = styled.div({\n    fontSize: '15px',\n    lineHeight: '1.4',\n    color: '#696969'\n})\n\nexport default Container","import React from 'react'\nimport styled from '@emotion/styled'\nimport Container from '../components/Container'\n\nconst NavbarContainer = styled(Container)({\n    height: 60,\n    backgroundColor: '#000',\n    display: 'flex',\n    position: 'fixed',\n    top: 0,\n    width: '100%',\n    alignItems: 'center'\n})\n\nconst NavTitle = styled.h3({\n    padding: '0 30px',\n    color: '#fff',\n    fontFamily: 'Tahoma',\n    width: 40\n})\n\nconst NavMenuContainer = styled.div({\n    alignSelf: 'center',\n    height: '100%',\n    display: 'flex',\n    flex: 1,\n    marginRight: 70,\n    '::hover': {\n        color: 'green'\n    },\n    justifyContent: 'center'\n})\n\nconst NavItem = styled.button(({ active }) => ({\n    backgroundColor: 'inherit',\n    border: 'none',\n    color: '#fff',\n    height: '100%',\n    outline: 'none',\n    fontWeight: 800,\n    padding: '0 10px',\n    ':hover': {\n        backgroundColor: '#f53b57',\n        cursor: 'pointer'\n    }\n}))\n\nconst Navbar = () => (\n    <NavbarContainer>\n        <NavTitle>\n            Novus\n        </NavTitle>\n        <NavMenuContainer>\n            <NavItem>HOME</NavItem> \n            <NavItem>ABOUT</NavItem>\n            <NavItem>PROJECTS</NavItem>\n            <NavItem>CONTACT</NavItem>\n        </NavMenuContainer>\n    </NavbarContainer>\n)\n\nexport default Navbar","import styled from '@emotion/styled'\n\nconst Flex = styled.div({\n    display: 'flex',\n    flex: 1\n})\n\nexport default Flex","import styled from '@emotion/styled'\n\nconst Card = styled.div({\n    padding: 25,\n    borderRadius: 5,\n    backgroundColor: \"white\",\n    color: 'black',\n    boxShadow: '0 0 3px rgba(0, 0, 0, 0.2)'\n})\n\nexport default Card","import React from 'react'\nimport Flex from '../components/Flex'\nimport Card from '../components/Card'\nimport styled from '@emotion/styled'\n\nconst Container = styled(Card)({\n    display: 'flex',\n    background: 'black',\n    bottom: 0,\n    borderRadius: 0,\n    color: '#a4a4a4',\n    height: 25,\n    padding: 0,\n    position: 'fixed',\n    width: '100%'\n})\n\nconst LeftContent = styled(Flex)({\n    margin: '0 10px'\n})\n\nconst RightContent = styled(Flex)({\n    margin: '0 10px',\n    flexDirection: 'row-reverse'\n})\n\nconst Footer = () => (\n    <Container>\n        <LeftContent>\n            Started developing this website on January 19, 2020 1:25 AM GMT+8 | \n            Last updated this website on January 19, 2020 09:31 PM GMT+8 \n        </LeftContent>\n        <RightContent>\n            &copy; All rights reserve to German Manalili\n        </RightContent>\n    </Container>\n)\n\nexport default Footer","import styled from '@emotion/styled'\n\nconst Parallax = styled.div(({ background, height }) => ({\n    backgroundImage: `url('${background}')`,\n    height: height ? height : 'calc(100vh - 60px)',\n    width: '100%',\n    backgroundAttachment: 'fixed',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: '100% calc(100vh - 60px)'\n}))\n\nexport default Parallax","import React from 'react'\nimport styled from '@emotion/styled'\nimport Container from '../components/Container'\nimport HeaderBackground from '../assets/images/ger.jpg'\nimport Parallax from '../components/Parallax'\n\nconst ContentContainer = styled(Container)({\n    minHeight: 'calc(100vh - 60px)',\n    flex: 1,\n    marginTop: 60\n})\n\nconst Content = () => (\n    <ContentContainer>\n        <Parallax\n            background={HeaderBackground}\n            // height='calc(100vh - 300px)'\n        >\n            <div>\n\n            </div>\n        </Parallax>\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n        <br />\n    </ContentContainer>\n)\n\nexport default Content","import React from 'react'\nimport Container from './components/Container'\nimport Navbar from './screens/Navbar'\nimport Footer from './screens/Footer'\nimport Content from './screens/Content'\nimport {\n  BrowserView,\n  MobileView,\n  // isBrowser,\n  // isMobile\n} from \"react-device-detect\"\n\nconst App = () => {\n  return (\n    <Container>\n      <BrowserView>\n        <Navbar />\n        <Content />\n        <Footer />\n      </BrowserView>\n      <MobileView>\n        <h1>I have not yet implemented mobile support for this site please use a computer or change to desktop mode.</h1>\n      </MobileView>\n    </Container>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ger.2a5467b0.jpg\";"],"sourceRoot":""}