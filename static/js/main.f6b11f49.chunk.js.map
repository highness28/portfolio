{"version":3,"sources":["assets/images/avatar.jpg","components/Avatar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Avatar","styled","div","size","backgroundImage","avatar","backgroundSize","borderRadius","height","styles","width","xs","sm","md","lg","Card","padding","backgroundColor","color","boxShadow","Flex","display","flexDirection","alignItems","Container","fontSize","lineHeight","App","className","style","marginBlockStart","marginBlockEnd","margin","href","textDecoration","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,oC,sLCGrCC,EAASC,IAAOC,KAAI,oBAAGC,YAAH,MAAQ,KAAR,QAAoB,CAC5CC,gBAAgB,OAAD,OAASC,IAAT,KACfC,eAAgB,QAChBC,aAAc,IACdC,OAAQC,EAAOD,OAAOL,GACtBO,MAAOD,EAAOC,MAAMP,OAGhBM,EAAS,CACbD,OAAQ,CACNG,GAAI,GACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KAENJ,MAAO,CACLC,GAAI,GACJC,GAAI,IACJC,GAAI,IACJC,GAAI,MAIOd,IChBAe,EARFd,IAAOC,IAAI,CACpBc,QAAS,GACTT,aAAc,EACdU,gBAAiB,QACjBC,MAAO,QACPC,UAAW,mCCDTC,EAAOnB,IAAOC,IAAI,CACtBmB,QAAS,OACTC,cAAe,SACfC,WAAY,WAGRC,EAAYvB,IAAOC,IAAI,CAC3BuB,SAAU,OACVC,WAAY,MACZR,MAAO,YA+CMS,MA5Cf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,KACE,kBAACR,EAAD,KACE,kBAAC,EAAD,CAAQjB,KAAK,QAEf,kBAACiB,EAAD,KACE,wBAAIS,MAAO,CAAEC,iBAAkB,QAASC,eAAgB,UAAxD,oBAGF,kBAACX,EAAD,CAAMS,MAAO,CAAEG,OAAQ,WACrB,kBAACR,EAAD,iCAGA,kBAACA,EAAD,0CAKF,kBAACJ,EAAD,CAAMS,MAAO,CAAEG,OAAQ,WACrB,kBAACR,EAAD,0BAGA,kBAACA,EAAD,uCAKF,kBAACJ,EAAD,CAAMS,MAAO,CAAEG,OAAQ,WACrB,kBAACR,EAAD,KACE,uBAAGS,KAAK,wDAAwDJ,MAAO,CAAEK,eAAgB,OAAQhB,MAAO,YAAxG,mBAEF,kBAACM,EAAD,KACE,uBAAGS,KAAK,sCAAsCJ,MAAO,CAAEK,eAAgB,OAAQhB,MAAO,YAAtF,0BCzCMiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f6b11f49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.156ca00e.jpg\";","import styled from '@emotion/styled'\nimport avatar from '../assets/images/avatar.jpg'\n\nconst Avatar = styled.div(({ size='sm' }) => ({\n  backgroundImage: `url(${avatar})`,\n  backgroundSize: 'cover',\n  borderRadius: 205,\n  height: styles.height[size],\n  width: styles.width[size],\n}))\n\nconst styles = {\n  height: {\n    xs: 50,\n    sm: 100,\n    md: 200,\n    lg: 400,\n  },\n  width: {\n    xs: 50,\n    sm: 100,\n    md: 200,\n    lg: 400,\n  },\n}\n\nexport default Avatar","import styled from '@emotion/styled'\n\nconst Card = styled.div({\n    padding: 25,\n    borderRadius: 5,\n    backgroundColor: \"white\",\n    color: 'black',\n    boxShadow: '0 15px 20px rgba(0, 0, 0, 0.3)'\n})\n\nexport default Card","import React from 'react'\nimport './App.css'\nimport Avatar from './components/Avatar'\nimport Card from './components/Card'\nimport styled from '@emotion/styled'\n\nconst Flex = styled.div({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center'\n})\n\nconst Container = styled.div({\n  fontSize: '15px',\n  lineHeight: '1.4',\n  color: '#696969'\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Card>\n          <Flex>\n            <Avatar size='sm' />\n          </Flex>\n          <Flex>\n            <h4 style={{ marginBlockStart: '0.5em', marginBlockEnd: '0.5em' }}>German Manalili</h4>\n          </Flex>\n\n          <Flex style={{ margin: '15px 0' }}>\n            <Container>\n              Full Stack Web Developer\n            </Container>\n            <Container>\n              Invento Software Solutions, Inc.\n            </Container>\n          </Flex>\n\n          <Flex style={{ margin: '15px 0' }}>\n            <Container>\n              Technical Manager\n            </Container>\n            <Container>\n              Novus Software Solutions Inc.\n            </Container>\n          </Flex>\n\n          <Flex style={{ margin: '15px 0' }}>\n            <Container>\n              <a href='https://www.linkedin.com/in/german-manalili-68ba6b133' style={{ textDecoration: 'none', color: 'skyBlue' }}>Linked Profile</a>\n            </Container>\n            <Container>\n              <a href='https://www.facebook.com/Highness28' style={{ textDecoration: 'none', color: 'skyBlue' }}>Facebook Profile</a>\n            </Container>  \n          </Flex>\n        </Card>\n      </header>\n    </div>\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}